from abc import ABC, abstractmethod


class DataBase(ABC):
    """
    Интерфейс Субъекта объявляет общие операции как для Реального Субъекта, так
    и для Заместителя. Пока клиент работает с Реальным Субъектом, используя этот
    интерфейс, вы сможете передать ему заместителя вместо реального субъекта.
    """

    @abstractmethod
    def request(self):
        pass


class RealDataBase(DataBase):
    """
    Реальный Субъект содержит некоторую базовую бизнес-логику. Как правило,
    Реальные Субъекты способны выполнять некоторую полезную работу, которая к
    тому же может быть очень медленной или точной – например, коррекция входных
    данных. Заместитель может решить эти задачи без каких-либо изменений в коде
    Реального Субъекта.
    """

    def request(self):
        print("RealDataBase: Получил запрос")


class Proxy(DataBase):
    """
    Интерфейс Заместителя идентичен интерфейсу Реального Субъекта.
    """

    def __init__(self, real_subject):
        self._real_subject = real_subject

    def request(self):
        """
        Наиболее распространёнными областями применения паттерна Заместитель
        являются ленивая загрузка, кэширование, контроль доступа, ведение
        журнала и т.д. Заместитель может выполнить одну из этих задач, а затем,
        в зависимости от результата, передать выполнение одноимённому методу в
        связанном объекте класса Реального Субъекта.
        """

        if self.check_access():
            self._real_subject.request()

    def check_access(self):
        print("Proxy: Проверка доступа перед запуском реального запроса.")
        return True


def client_code(subject):
    subject.request()


print("Client: Выполнение клиентского кода с реальной базой данных: ")
real_subject = RealDataBase()
client_code(real_subject)

print("Client: Выполнение клиентского кода с proxy:")
proxy = Proxy(real_subject)
client_code(proxy)
